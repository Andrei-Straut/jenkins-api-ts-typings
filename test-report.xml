<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite id="0" name="C:\__Dev\jenkins-api-ts-typings\test\JenkinsNode.test.ts" errors="0" package="C:\__Dev\jenkins-api-ts-typings\test\JenkinsNode.test.ts" hostname="localhost" tests="70" failures="0" time="5.309" timestamp="2017-11-08T15:17:07">
    <properties>
    </properties>
    <testcase classname="Test JenkinsNode" name="works if getJsonData returns correct results (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if getJsonData returns correct results" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if _class property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if _class property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if displayName property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if displayName property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if icon property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if icon property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if iconClassName property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if iconClassName property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if idle property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if idle property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if jnlpAgent property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if jnlpAgent property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if launchSupported property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if launchSupported property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if loadStatistics property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if loadStatistics property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if manualLaunchAllowed property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if manualLaunchAllowed property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if monitorData property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if monitorData property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if numExecutors property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if numExecutors property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if offline property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if offline property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if offlineCause property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if offlineCause property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if offlineCauseReason property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if offlineCauseReason property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if temporarilyOffline property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if temporarilyOffline property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if oneOffExecutors property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if oneOffExecutors property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if _class property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if _class property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if displayName property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if displayName property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if icon property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if icon property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if iconClassName property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if iconClassName property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if idle property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if idle property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if jnlpAgent property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if jnlpAgent property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if launchSupported property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if launchSupported property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if loadStatistics property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if loadStatistics property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if manualLaunchAllowed property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if manualLaunchAllowed property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if monitorData property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if monitorData property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if numExecutors property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if numExecutors property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if offline property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if offline property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if offlineCause property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if offlineCause property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if offlineCauseReason property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if offlineCauseReason property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if temporarilyOffline property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if temporarilyOffline property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if oneOffExecutors property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if oneOffExecutors property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if all JSON values are correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if all JSON values are correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if all non-array-type class values are undefined on instantiation" time="0">
    </testcase>
    <testcase classname="Test JenkinsNode" name="works if all array-type class values are defined and empty on instantiation" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="1" name="C:\__Dev\jenkins-api-ts-typings\test\JenkinsJob.test.ts" errors="0" package="C:\__Dev\jenkins-api-ts-typings\test\JenkinsJob.test.ts" hostname="localhost" tests="110" failures="0" time="5.901" timestamp="2017-11-08T15:17:07">
    <properties>
    </properties>
    <testcase classname="Test JenkinsJob" name="works if getJsonData returns correct results (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if getJsonData returns correct results" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if _class property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if _class property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if actions property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if actions property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if description property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if description property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if displayName property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if displayName property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if displayNameOrNull property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if displayNameOrNull property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if fullDisplayName property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if fullDisplayName property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if fullName property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if fullName property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if name property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if name property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if url property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if url property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if buildable property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if buildable property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if color property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if color property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if healthReport property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if healthReport property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if inQueue property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if inQueue property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if keepDependencies property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if keepDependencies property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if nextBuildNumber property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if nextBuildNumber property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if property property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if property property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if queueItem property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if queueItem property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if concurrentBuild property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if concurrentBuild property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if scm property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if scm property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if modules property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if modules property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if name property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if name property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if url property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if url property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if _class property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if _class property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if displayName property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if displayName property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if fullDisplayName property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if fullDisplayName property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if description property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if description property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if color property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if color property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if buildable property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if buildable property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if inQueue property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if inQueue property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if keepDependencies property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if keepDependencies property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if nextBuildNumber property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if nextBuildNumber property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if concurrentBuild property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if concurrentBuild property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if displayNameOrNull property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if displayNameOrNull property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if fullName property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if fullName property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if numberOfBuilds property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if numberOfBuilds property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if builds property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if builds property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if firstBuild property is not set from JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if firstBuild property is not set from JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastBuild property is not set from JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastBuild property is not set from JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastCompletedBuild property is not set from JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastCompletedBuild property is not set from JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastFailedBuild property is not set from JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastFailedBuild property is not set from JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastStableBuild property is not set from JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastStableBuild property is not set from JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastSuccessfulBuild property is not set from JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastSuccessfulBuild property is not set from JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastUnstableBuild property is not set from JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastUnstableBuild property is not set from JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastUnsuccessfulBuild property is not set from JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if lastUnsuccessfulBuild property is not set from JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if actions property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if actions property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if healthReport property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if healthReport property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if property property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if property property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if queueItem property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if queueItem property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if downstreamProjects property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if downstreamProjects property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if upstreamProjects property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if upstreamProjects property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if scm property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if scm property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if modules property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if modules property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if all JSON values are correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if all JSON values are correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if all non-array-type class values are undefined on instantiation" time="0">
    </testcase>
    <testcase classname="Test JenkinsJob" name="works if all array-type class values are defined and empty on instantiation" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="2" name="C:\__Dev\jenkins-api-ts-typings\test\JenkinsBuild.test.ts" errors="0" package="C:\__Dev\jenkins-api-ts-typings\test\JenkinsBuild.test.ts" hostname="localhost" tests="94" failures="0" time="5.968" timestamp="2017-11-08T15:17:07">
    <properties>
    </properties>
    <testcase classname="Test JenkinsBuild" name="works if getJsonData returns correct results (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if getJsonData returns correct results" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if _class property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if _class property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if actions property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if actions property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if artifacts property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if artifacts property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if building property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if building property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if description property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if description property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if displayName property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if displayName property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if duration property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if duration property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if estimatedDuration property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if estimatedDuration property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if executor property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if executor property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if fullDisplayName property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if fullDisplayName property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if id property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if id property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if keepLog property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if keepLog property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if number property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if number property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if queueId property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if queueId property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if result property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if result property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if timestamp property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if timestamp property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if date property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if date property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if url property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if url property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if builtOn property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if builtOn property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if culprits property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if culprits property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if mavenArtifacts property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if mavenArtifacts property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if mavenVersionUsed property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if mavenVersionUsed property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if _class property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if _class property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if actions property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if actions property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if artifacts property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if artifacts property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if building property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if building property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if description property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if description property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if displayName property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if displayName property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if duration property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if duration property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if estimatedDuration property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if estimatedDuration property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if executor property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if executor property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if fullDisplayName property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if fullDisplayName property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if id property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if id property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if keepLog property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if keepLog property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if number property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if number property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if queueId property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if queueId property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if result property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if result property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if timestamp property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if timestamp property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if date property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if date property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if url property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if url property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if builtOn property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if builtOn property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if culprits property empty set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if culprits property empty set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if mavenArtifacts property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if mavenArtifacts property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if mavenVersionUsed property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if mavenVersionUsed property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if all JSON values are correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if all JSON values are correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if all non-array-type class values are undefined on instantiation" time="0">
    </testcase>
    <testcase classname="Test JenkinsBuild" name="works if all array-type class values are defined and empty on instantiation" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="3" name="C:\__Dev\jenkins-api-ts-typings\test\JenkinsChangeSet.test.ts" errors="0" package="C:\__Dev\jenkins-api-ts-typings\test\JenkinsChangeSet.test.ts" hostname="localhost" tests="50" failures="0" time="1.135" timestamp="2017-11-08T15:17:12">
    <properties>
    </properties>
    <testcase classname="Test JenkinsChangeSet" name="works if getJsonData returns correct results (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if getJsonData returns correct results" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if _class property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if _class property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if affectedPaths property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if affectedPaths property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if commitId property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if commitId property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if timestamp property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if timestamp property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if authorData property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if authorData property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if authorEmail property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if authorEmail property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if comment property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if comment property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if date property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if date property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if id property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if id property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if msg property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if msg property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if paths property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if paths property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if _class property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if _class property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if affectedPaths property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if affectedPaths property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if commitId property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if commitId property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if timestamp property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if timestamp property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if authorData property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if authorData property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if authorEmail property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if authorEmail property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if comment property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if comment property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if date property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if date property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if id property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if id property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if msg property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if msg property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if paths property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if paths property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if all JSON values are correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if all JSON values are correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if all non-array-type class values are undefined on instantiation" time="0">
    </testcase>
    <testcase classname="Test JenkinsChangeSet" name="works if all array-type class values are defined and empty on instantiation" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="4" name="C:\__Dev\jenkins-api-ts-typings\test\JenkinsUser.test.ts" errors="0" package="C:\__Dev\jenkins-api-ts-typings\test\JenkinsUser.test.ts" hostname="localhost" tests="30" failures="0" time="0.876" timestamp="2017-11-08T15:17:13">
    <properties>
    </properties>
    <testcase classname="Test JenkinsUser" name="works if getJsonData returns correct results (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if getJsonData returns correct results" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if _class property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if _class property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if absoluteUrl property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if absoluteUrl property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if description property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if description property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if fullName property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if fullName property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if id property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if id property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if property property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if property property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if _class property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if _class property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if absoluteUrl property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if absoluteUrl property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if description property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if description property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if fullName property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if fullName property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if id property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if id property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if property property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if property property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if all JSON values are correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if all JSON values are correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if all non-array-type class values are undefined on instantiation" time="0">
    </testcase>
    <testcase classname="Test JenkinsUser" name="works if all array-type class values are defined and empty on instantiation" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="5" name="C:\__Dev\jenkins-api-ts-typings\test\JenkinsAction.test.ts" errors="0" package="C:\__Dev\jenkins-api-ts-typings\test\JenkinsAction.test.ts" hostname="localhost" tests="35" failures="0" time="1.006" timestamp="2017-11-08T15:17:13">
    <properties>
    </properties>
    <testcase classname="Test JenkinsAction" name="works if getJsonData returns correct results (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if getJsonData returns correct results" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if _class property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if _class property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if data property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if data property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if _class property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if _class property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if data property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if data property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if all JSON values are correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if all JSON values are correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if all non-array-type class values are undefined on instantiation" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if all array-type class values are defined and empty on instantiation" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if isClass method returns correct results (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if isClass method returns correct results" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if isClass method returns correct results with empty json (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if isClass method returns correct results with empty json" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if isClass method returns correct results for undefined _class" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if isClass method returns correct results for undefined method parameter" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if isClass method returns correct results for both undefined _class and method parameter" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if isClass method returns correct results for null method parameter" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if isClass method returns correct results for undefined _class and null method parameter" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if has method returns correct results (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if has method returns correct results" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if has method returns correct results with empty json (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if has method returns correct results with empty json" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if has method returns correct results for undefined method parameter" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if has method returns correct results for null method parameter" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if get method returns correct results (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if get method returns correct results (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if get method returns correct results with empty json (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if get method returns correct results with empty json" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if get method returns correct results for undefined method parameter" time="0">
    </testcase>
    <testcase classname="Test JenkinsAction" name="works if has method returns correct results for null method parameter" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
  <testsuite id="6" name="C:\__Dev\jenkins-api-ts-typings\test\JenkinsView.test.ts" errors="0" package="C:\__Dev\jenkins-api-ts-typings\test\JenkinsView.test.ts" hostname="localhost" tests="28" failures="0" time="0.601" timestamp="2017-11-08T15:17:13">
    <properties>
    </properties>
    <testcase classname="Test JenkinsView" name="works if getJsonData returns correct results (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if getJsonData returns correct results" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if name property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if name property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if url property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if url property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if _class property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if _class property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if description property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if description property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if property property is correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if property property is correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if name property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if name property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if url property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if url property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if description property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if description property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if _class property is not set when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if _class property is not set when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if _class property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if _class property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if property property is empty when not present in JSON (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if property property is empty when not present in JSON" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if all JSON values are correctly parsed (fromJsonString)" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if all JSON values are correctly parsed" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if all non-array-type class values are undefined on instantiation" time="0">
    </testcase>
    <testcase classname="Test JenkinsView" name="works if all array-type class values are defined and empty on instantiation" time="0">
    </testcase>
    <system-out/>
    <system-err/>
  </testsuite>
</testsuites>